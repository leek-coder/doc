Zookeeper简介
zookeeper是一个高效的分布式协调服务。基于ZAB(原子消息广播)算法，该框架可以很好的保证分布式环境中数据的一致性。

zookeeper的安装
1:解压zookepper
   tar -zxvf zookeeper-3.4.9.tar.gz

2:将conf下的zoo_sample.cfg 改名为zoo.cfg 这一步也可以不需要修改
编辑zoo.cfg文件内容，修改文件存放目录

3:启动 ./zkServer.sh start
  关闭 ./zkServer.sh stop
  查看运行状态   ./zkServer.sh status
4:配置zookeeper集群
server.0=192.168.3.110:2888:3888
server.1=192.168.3.111:2888:3888
server.2=192.168.3.112:2888:3888

id的取值范围：1-255，用id来标识该机器在集群中的机器序号
2181是zookeeper的端口号
3888标识leader选举的端口
2888标识follower节点与leader节点交换信息的端口号
server.0=192.168.33.248:2888:3888                                                                                                                                                                                                             
server.1=192.168.33.249:2888:3888                                                                                         
server.2.=0.0.0.0:2888:3888

二：创建myid
在每个服务器的dataDir目录下创建一个myid文件，文件就一行数据，这个数据就是当前配置的server对应的数字


客户端的写请求一定会发送到leader节点
客户端的读请求会根据算法分配到不同的节点上




在每个节点data路径下新建myid文件

zkCli.sh 
ls /
create /
delele /



持久化节点：创建后节点会一直存在zookeeper服务器上，直到主动删除
持久化有序节点：每个节点都会在它的一级子节点维护一个顺序。
临时节点：临时节点的生命周期和客户端的会话保持一致，当客户端会话失效，该节点自动清理
临时有序节点：在临时节点上增加一个顺序特性

create：创建节点  -s是否有序  -e 是否临时节点  path：路径   data:数据   默认是持久化节点



version：乐观锁的概念
数据库里面有一个version字段去控制数据行的版本号


cversion:子节点的版本号
aclVersion：标识acl的版本号，修改节点权限
dataVersion:标识当前节点数据的版本号
czxid:节点创建时的事务id
mzxid：节点最后一次被更新的事务id

导入jar包
    <dependency>
      <groupId>org.apache.zookeeper</groupId>
      <artifactId>zookeeper</artifactId>
      <version>3.4.10</version>
    </dependency>



分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。


使用分布式锁的目的，无外乎就是保证同一时间只有一个客户端可以对共享资源进行操作。


分布式环境下面临的问题？

网络通信？
网络本身的不可靠性，因此会涉及到一些网络通信问题

网络分区？
当网络发生异常导致分布式系统中部分节点之间的网络延时不断增大，最终导致组成分布式架构的所有节点，只有部分节点能够正常通信。

三态？
在分布式架构里状态除了成功、失败外还有超时状态

(ACID)原子性、一致性、隔离性、持久性

CAP   
C(一致性):所有节点上的数据，时刻保持一致
可用性(A):每个请求都能够收到一个响应，无论是响应成功和响应失败。
分区容错性(P)：表示系统出现脑裂以后，可能导致某些server与集群中的其他机器失去联系。

CAP理论仅适用于原子读写的Nosql数据库，不适用于数据库系统。





典型的应用场景

配置管理
集群管理
发布与订阅
数据库切换
分布式日志的收集
分布式锁，队列管理
master选举




Zookeeper特性？

1、顺序一致性 ：从一个客户端发起的事务请求，最终会严格按照顺序被应用到Zookeeper上。

2、原子性：所有的事务请求到处理结果，在整个集群中的所有机器上的应用的情况是一致性的，也就是说，要么整个集群中的所有机器都成功应用了某一事务，要不全部不应用。

3、可靠性：一旦服务器成功应用某一个事务数据，并且对客户端做了相应，那么这个数据在整个集群中一定是同步并且保留下来的。

4、实时性：一旦一个事务成功应用，客户端能够立刻从服务器端读取到事务变更后的最新数据状态(Zookeeper仅仅保证在一定时间内，近实时)


Zookeeper集群有三种角色：leader，follower, observer

leader：接收所有follower的提案请求并统一协调发起提案的投票，负责与所有的follower进行内部的数据交换(同步)
follower：直接为客户端服务并参与提案的投票，同时与leader进行数据交换(同步)
Observer：直接为客户端服务但并不参与提案的投票，同时也与leader进行数据交换(同步)


























