Zookeeper简介
zookeeper是一个高效的分布式协调服务。基于ZAB(原子消息广播)算法，该框架可以很好的保证分布式环境中数据的一致性。

zookeeper的安装
1:解压zookepper
   tar -zxvf zookeeper-3.4.9.tar.gz

2:将conf下的zoo_sample.cfg 改名为zoo.cfg 这一步也可以不需要修改
编辑zoo.cfg文件内容，修改文件存放目录

3:启动 ./zkServer.sh start
  关闭 ./zkServer.sh stop
  查看运行状态   ./zkServer.sh status
4:配置zookeeper集群
server.0=192.168.3.110:2888:3888
server.1=192.168.3.111:2888:3888
server.2=192.168.3.112:2888:3888

id的取值范围：1-255，用id来标识该机器在集群中的机器序号
2181是zookeeper的端口号
3888标识leader选举的端口
2888标识follower节点与leader节点交换信息的端口号
server.0=192.168.33.248:2888:3888                                                                                                                                                                                                             
server.1=192.168.33.249:2888:3888                                                                                         
server.2.=0.0.0.0:2888:3888

二：创建myid
在每个服务器的dataDir目录下创建一个myid文件，文件就一行数据，这个数据就是当前配置的server对应的数字


客户端的写请求一定会发送到leader节点
客户端的读请求会根据算法分配到不同的节点上




在每个节点data路径下新建myid文件

zkCli.sh 
ls /
create /
delele /



持久化节点：创建后节点会一直存在zookeeper服务器上，直到主动删除
持久化有序节点：每个节点都会在它的一级子节点维护一个顺序。
临时节点：临时节点的生命周期和客户端的会话保持一致，当客户端会话失效，该节点自动清理
临时有序节点：在临时节点上增加一个顺序特性

create：创建节点  -s是否有序  -e 是否临时节点  path：路径   data:数据   默认是持久化节点



version：乐观锁的概念
数据库里面有一个version字段去控制数据行的版本号


cversion:子节点的版本号
aclVersion：标识acl的版本号，修改节点权限
dataVersion:标识当前节点数据的版本号
czxid:节点创建时的事务id
mzxid：节点最后一次被更新的事务id

导入jar包
    <dependency>
      <groupId>org.apache.zookeeper</groupId>
      <artifactId>zookeeper</artifactId>
      <version>3.4.10</version>
    </dependency>



分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。


使用分布式锁的目的，无外乎就是保证同一时间只有一个客户端可以对共享资源进行操作。


分布式环境下面临的问题？

网络通信？
网络本身的不可靠性，因此会涉及到一些网络通信问题

网络分区？
当网络发生异常导致分布式系统中部分节点之间的网络延时不断增大，最终导致组成分布式架构的所有节点，只有部分节点能够正常通信。

三态？
在分布式架构里状态除了成功、失败外还有超时状态

(ACID)原子性、一致性、隔离性、持久性

CAP   
C(一致性):所有节点上的数据，时刻保持一致
可用性(A):每个请求都能够收到一个响应，无论是响应成功和响应失败。
分区容错性(P)：表示系统出现脑裂以后，可能导致某些server与集群中的其他机器失去联系。

CAP理论仅适用于原子读写的Nosql数据库，不适用于数据库系统。


在客户端创建的的会话周期中，创建的临时节点，会话结束以后会自动删除。



典型的应用场景

HBase:使用zookeeper进行master选举，数据间协调
dubbo:服务注册中心
Solr:使用Zookeeper进行集群管理，Leader选举，配置管理
配置中心
发布与订阅
数据库切换
分布式日志的收集
分布式锁，队列管理
分布式队列
myCat:集群管理，配置管理
sharding-sphere：集群管理，配置管理


zookeeper同类产品：
consul


zookeeper实现配置中心
znode 能存储数据                 配置中心
Watch能监听数据的改变

一个配置项一个znode
一个配置文件一个znode




zookeeper实现分布式队列 ：  入队(创建顺序节点)
put&&get
出队：消费者取出所有的子节点，移除最小号节点

无界队列，有界队列(分布式锁实现)


zookeeper实现分布式锁

争抢锁(创建临时节点)

开始---获取锁创建节点--成功(即获得锁)执行业务 --失败 注册节点的watcher(阻塞等待)
临时节点下不能存储子节点


watcher
acl


Zookeeper特性？

1、顺序一致性 ：从一个客户端发起的事务请求，最终会严格按照顺序被应用到Zookeeper上。

2、原子性：所有的事务请求到处理结果，在整个集群中的所有机器上的应用的情况是一致性的，也就是说，要么整个集群中的所有机器都成功应用了某一事务，要不全部不应用。

3、可靠性：一旦服务器成功应用某一个事务数据，并且对客户端做了相应，那么这个数据在整个集群中一定是同步并且保留下来的。

4、实时性：一旦一个事务成功应用，客户端能够立刻从服务器端读取到事务变更后的最新数据状态(Zookeeper仅仅保证在一定时间内，近实时)


Zookeeper集群有三种角色：leader，follower, observer

leader：接收所有follower的提案请求并统一协调发起提案的投票，负责与所有的follower进行内部的数据交换(同步)
follower：直接为客户端服务并参与提案的投票，同时与leader进行数据交换(同步)
Observer：直接为客户端服务但并不参与提案的投票，同时也与leader进行数据交换(同步)








zookeeper客户端命令

connect:链接到zookeeper集合
create：创建znode
exists：检查znode是否存在及其信息
get data  从特定的znode获取数据
set data  在特定的znode中设置数据
delete  删除特定的znode及其所有子项
close: 关闭连接

get /tmp true   打开监听机制







第三方的客户端

zkClient
Curator


会话中的请求按FIFO顺序执行


节点可以包含与之关联的数据以及自节点

节点类型：持久，顺序，临时，临时有序节点



czxid：创建该节点的zxid    zookeeper中的每次更改操作都对应一个唯一的事务id，称为Zxid，他是一个全局的有序戳记，如果zxid1小雨zxid2，则zxid1发生在zxid2之前
mzxid：最后修改该节点的zxid
pzxid：znode最后更新的子节点的zxid
ctime：该节点的创建时间
mtime：该节点的最后修改时间
dataversion:该节点数据被修改的次数
cversion:该节点的子节点变更次数
dataLength：该节点的数据的长度
numChildren:子节点数



watch监听机制

客户端可以在znodes上设置watch，监听znode的变化。



1:API接口加入熔断限流代码

两类watch

data watch 监听数据变更

child watch 监听子节点变化



zookeeper集群----ZAB协议



根据zookeeper的这些特性，我们来看看如何利用这些特性来实现分布式锁：

创建一个锁目录lock

线程A获取锁会在lock目录下，创建临时顺序节点

获取锁目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁

线程B创建临时节点并获取所有兄弟节点，判断自己不是最小节点，设置监听(watcher)比自己次小的节点

线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是最小的节点，获得锁
















