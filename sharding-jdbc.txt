什么是分库分表？

  数据分片 sharding

为什么需要分库分表？

随着我们业务越来越大，单机单个应用瓶颈问题。

数据库持久化硬盘如何去扩容

数据库瓶颈解决方案？
1:sql，表优化
2:读写分离
3:分库分表



读写分离
读取(查询)，修改，插入，删除crud
数据库角色:master(主库，写库) slave(从库，读库)

读写分离：insert, delete,update走主库   然后select走slave

应用：读多写少，从库压力会很大，主库相对来说会低。

读写分离Java分类：

客户端：(应用层)开源框架：  sharding-jdbc 
优点：
1:程序自动完成，数据源管理方便
2:不需要维护，因为没用中间件
3:理论支持任何数据库

缺点：
增加了开发成本，代码有入侵
不能做到动态增加数据源



中间件:(代理层proxy) mycat


优点：



缺点：






分库分表:目前数据终极解决方案，解决高并发，数据分片

垂直：

水平：

如何设计一个永远都不需要迁移的方案

垂直+水平




分库分表的策略：

Hash取模：通过表的一列字段进行hash取出code的值来区分
Range范围：按年份，按时间
List预定义：事先设定100个数据


分库分表带来的问题？
1:查询数据结果集合并
2:sql的改变
3:分布式事务
4:全局唯一性id

Sharding-jdbc读写分离，分库分表，分布式事务应用

Sharding-jdbc采用无中心化架构，适用于Java开发的高性能的轻量级应用。


数据分片：
分库&分表
读写分离
分布式主键


分布式事务：
XA强一致事务


ShardingSphere的3个产品的数据分片主要流程是完全一致的。

核心由SQL解析--执行器优化---SQL路由---SQL改写===SQL执行--结果归并的流程组成

数据节点分布说明
均匀分布：数据源能力均衡
自定义分布：数据源能力不均
 


Sharding-jdbc提供了常用的分片策略实现，分片策略由两部分组成

分片键
分片算法


Sharding-jdbc提供的5中分片策略

none:不分片策略  对应NoneShardingStrategy  不分片策略，sql会被发给所有节点执行。

inline：行表达式分片策略 
对应inlineShardingStrategy，只支持单片分键
行表达式


complex  复合分片策略

ComplexShardingStrategy支持多分片键，由于多分片键之间的关系纷杂。


Hint分片策略


分布式主键：在分片规则配置模块可配置每个表的主键生成策略，默认使用雪花算法，UUID










数据库最佳实践

基础规范：
表必须要有主键，建议使用整形作为主键
禁止使用外键  外键会影响性能     表之间的关联性和完整性通过应用层控制
应考虑到大致的数量级，若表记录数据低于1000w，尽量使用单表，不建议分表
建议将大字段，访问频率低及不要筛选的字段拆分到扩展表中(做好垂直拆分)
控制数据库实例中表的总数


列设计规范


合理使用字段类型：如

正确区分 tinyint，int，bigint的范围
使用varchar(20)存储手机号，不要使用整数
使用INT存储IPv4，不要使用char(15)
涉及金额使用decaimal，并制定精度

所有字段应定义为not null 并设置默认值


索引规范

非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引





















